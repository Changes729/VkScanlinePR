#version 450
#define BLOCK_SIZE 256

layout (local_size_x = BLOCK_SIZE) in;

layout(std140, binding = 0)uniform UBO{
    uint n_points;
    float w, h;
    vec4 m0, m1, m2, m3;
}ubo;

layout(std430, binding = 1) buffer PosIn{
    vec2 pos_in[];
};

layout(std430, binding = 2) buffer PosPathIdx{
    uint pos_path_idx[];
};

// ---------- output --------------
layout(std430, binding = 3) buffer TransformedPos{
    vec2 transformed_pos[];
};

layout(std430, binding = 4) buffer PathVisible{
    // 64 bit: path_visible
    // size: n_path * 2
    int path_visible[];
};
// --------------------------------


void main() {
    uint poi = gl_WorkGroupID.x * BLOCK_SIZE + gl_LocalInvocationID.x;
    if (poi >= ubo.n_points){ 
		return;
    }

    vec2 pos = pos_in[poi];
    
    vec4 ip = vec4(pos.x, pos.y, 0, 1.f);
    vec4 op;
    op.x = dot(ip, ubo.m0);
    op.y = dot(ip, ubo.m1);
    op.z = dot(ip, ubo.m2);
    op.w = dot(ip, ubo.m3);

    // float w_inv = 1.0f / op.w;

    // op.x *= w_inv;
    // op.y *= w_inv;
    // op.z *= w_inv;
    op.x /= op.w;
    op.y /= op.w;
    op.z /= op.w;

    // path visible flag:
	//
	//         y > height
	//
	//         5 | 6 | 7
	// x < 0   3 | x | 4  x > width
	//         0 | 1 | 2 
	//
	//           y < 0

    int x_flag = op.x < 0 ? 0 : (op.x < ubo.w ? 1 : 2);
    int y_flag = op.y < 0 ? 0 : (op.y < ubo.h ? 1 : 2);
    
    uint pidx = pos_path_idx[poi];
    switch((y_flag << 4) | (x_flag)){
        case 0x00: path_visible[pidx] |= 0x10000000; break;
        case 0x01: path_visible[pidx] |= 0x01000000; break;
        case 0x02: path_visible[pidx] |= 0x00100000; break;
        case 0x10: path_visible[pidx] |= 0x00010000; break;
        case 0x11: path_visible[pidx] |= 0x10000001; break;
        case 0x12: path_visible[pidx] |= 0x00001000; break;
        case 0x20: path_visible[pidx] |= 0x00000100; break;
        case 0x21: path_visible[pidx] |= 0x00000010; break;
        case 0x22: path_visible[pidx] |= 0x00000001; break;
        default: break;
    }
    
    // transformed pos
    transformed_pos[poi] = vec2(op.x, op.y);
}