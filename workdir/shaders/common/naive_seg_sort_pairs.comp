#version 450

#define BATCH_SIZE 1024
#define BLOCK_SIZE 256
#define _SYNC_() groupMemoryBarrier(); barrier()

layout (local_size_x = BATCH_SIZE) in;

layout (push_constant) uniform PushConsts {
    layout(offset = 0)int kv_size;
    layout(offset = 4)int seg_size;
} push_consts;

layout(std430, binding = 0) buffer Keys{
    int keys[];
};

layout(std430, binding = 1) buffer Values{
    int values[];
};

layout(std430, binding = 2) buffer Segments{
    int segments[];
};

void main(){
    int seg_idx = int(gl_WorkGroupID.y * BLOCK_SIZE + gl_WorkGroupID.x);
// #define TEST
#ifdef TEST
    keys[seg_idx] = seg_idx;
    return;
#endif
    if(seg_idx >= push_consts.seg_size){
        return;
    }

    int thid = int(gl_LocalInvocationID.x);
    int kv_size = push_consts.kv_size;
    int segment_size = segments[seg_idx + 1] - segments[seg_idx];
    
    if(segment_size <= 1){
        return;
    }

#ifdef TEST
    keys[seg_idx] = segment_size;
    return;
#endif

    int batch_num = (segment_size - 1) / (BATCH_SIZE * 2);    
    int begin = segments[seg_idx];
    int flag = 1;
    for(int i = 0; i < segment_size; ++i){
        flag = 1 - flag;
        for(int bidx = 0; bidx <= batch_num; ++bidx){
            int l_ind = begin + (bidx * BATCH_SIZE * 2 + thid * 2 + flag + 0);
            int r_ind = begin + (bidx * BATCH_SIZE * 2 + thid * 2 + flag + 1);
            
            if(bidx == batch_num && r_ind >= (begin + segment_size)){
                break;
            }

            int kl = keys[l_ind];
            int kr = keys[r_ind];
            int vl = values[l_ind];
            int vr = values[r_ind];
            

            if(kl > kr || (kl == kr && vl > vr)){
                // swap key
                kl ^= kr;
                kr ^= kl;
                kl ^= kr;
                // int tmp = kl;
                // kl = kr;
                // kr = tmp;
                keys[l_ind] = kl;
                keys[r_ind] = kr;
                // atomicExchange(keys[l_ind], kl);
                // atomicExchange(keys[r_ind], kr);

                // swap value
                vl ^= vr;
                vr ^= vl;
                vl ^= vr;
                // tmp = vl;
                // vl = vr;
                // vr = tmp;
                values[l_ind] = vl;
                values[r_ind] = vr;
                // atomicExchange(values[l_ind], vl);
                // atomicExchange(values[r_ind], vr);
            }
        }
        // memoryBarrierBuffer();
        barrier();
    }
}