#version 450
#define BATCH_SIZE 1024

#define _SYNC_() memoryBarrierShared(); barrier();
// #define _SYNC_()


layout (local_size_x = BATCH_SIZE) in;

#define DATA_MAP(id) ((bidx * (BATCH_SIZE - 1) + (id)))

layout(std430, binding = 0) buffer DataInput{
    int data_input[];
};

layout(std430, binding = 1) volatile buffer DataOuput{
    int data_output[];
};

layout (push_constant) uniform PushConsts {
	layout(offset = 0)int n;
} push_consts;

// shared_data[BATCH_SIZE<<1] is a initial value
shared int shared_data[(BATCH_SIZE << 1) + 1];

void main(){
    int thid = int(gl_LocalInvocationID.x);
    int n = push_consts.n;
    int pout = 0, pin = 1;
    int batch_number = n / (BATCH_SIZE - 1);

    if(thid == 0){
        shared_data[BATCH_SIZE << 1] = 0;
    }
    _SYNC_();

    for(int bidx = 0; bidx <= batch_number; ++bidx){

        shared_data[pout * BATCH_SIZE + thid] = ((thid > 0) ? data_input[DATA_MAP(thid - 1)] : shared_data[BATCH_SIZE << 1]);
        _SYNC_();

        for(int offset = 1; offset < BATCH_SIZE; offset <<= 1){
            pout = 1 - pout;
            pin = 1 - pout;

            if(thid < offset){
                shared_data[pout * BATCH_SIZE + thid] = shared_data[pin * BATCH_SIZE + thid];
            }else{
                shared_data[pout * BATCH_SIZE + thid] = shared_data[pin * BATCH_SIZE + thid - offset] + shared_data[pin * BATCH_SIZE + thid];
            }
            _SYNC_();
        }

        if(thid == BATCH_SIZE - 1){
            shared_data[BATCH_SIZE << 1] = shared_data[pout * BATCH_SIZE + thid];
        }else{
            if(bidx != batch_number - 1 || DATA_MAP(thid) <= n){
                // data_output[DATA_MAP(thid)] = shared_data[pout * BATCH_SIZE + thid];
                atomicExchange(data_output[DATA_MAP(thid)], shared_data[pout * BATCH_SIZE + thid]);
                groupMemoryBarrier();
            }
        }
        
        _SYNC_();
    }
}